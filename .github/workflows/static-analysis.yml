name: "Static Analysis"

on:
    pull_request:
        branches:
            - "[0-9]+.[0-9]+"
            - "[0-9]+.x"
    push:
        branches:
            - "[0-9]+.[0-9]+"
            - "[0-9]+.x"

jobs:
    static-analysis-phpstan:
        name: "Static Analysis with PHPStan"
        runs-on: "ubuntu-20.04"name: "Static analysis centralised"

on:
    schedule:
        -   cron: '0 3 * * 1,3,5'
    workflow_dispatch:
    push:
        branches:
            - "[0-9]+.[0-9]+"
            - "[0-9]+.x"
            - "feature-*"
    pull_request:
        types: [ opened, synchronize, reopened ]


env:
    PIMCORE_PROJECT_ROOT: ${{ github.workspace }}
    PRIVATE_REPO: ${{ github.event.repository.private }}

jobs:
    setup-matrix:
        runs-on: ubuntu-latest
        outputs:
            php_versions: ${{ steps.parse-php-versions.outputs.php_versions }}
            matrix: ${{ steps.set-matrix.outputs.matrix }}
            private_repo: ${{ env.PRIVATE_REPO }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Checkout reusable workflow repo
              uses: actions/checkout@v4
              with:
                  repository: pimcore/workflows-collection-public
                  ref: main
                  path: reusable-workflows

            - name: Parse PHP versions from composer.json
              id: parse-php-versions
              run: |
                  if [ -f composer.json ]; then
                    php_versions=$(jq -r '.require.php' composer.json | grep -oP '\d+\.\d+' | tr '\n' ',' | sed 's/,$//')
                    if [ -z "$php_versions" ]; then
                      echo "No PHP versions found in composer.json"
                      echo "Setting default PHP value"
                      echo "php_versions=default" >> $GITHUB_OUTPUT
                    else
                      echo "php_versions=$php_versions" >> $GITHUB_OUTPUT
                      echo "#### php versions #### : $php_versions"
                    fi
                  else
                    echo "composer.json not found"
                    exit 1
                  fi

            - name: Set up matrix
              id: set-matrix
              run: |
                  php_versions="${{ steps.parse-php-versions.outputs.php_versions }}"
                  
                  MATRIX_JSON=$(cat reusable-workflows/phpstan-configuration/matrix-config.json)
                  
                  IFS=',' read -ra VERSIONS_ARRAY <<< "$php_versions"
                  
                  FILTERED_MATRIX_JSON=$(echo $MATRIX_JSON | jq --arg php_versions "$php_versions" '
                  {
                    matrix: [
                      .configs[] |
                      select(.php_version == $php_versions) |
                      .matrix[]
                    ]
                  }')
                  
                  ENCODED_MATRIX_JSON=$(echo $FILTERED_MATRIX_JSON | jq -c .)
                  
                  echo "matrix=${ENCODED_MATRIX_JSON}" >> $GITHUB_OUTPUT

    static-analysis:
        needs: setup-matrix
        strategy:
            matrix: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}
        uses: pimcore/workflows-collection-public/.github/workflows/reusable-static-analysis-centralized.yaml@main
        with:
            APP_ENV: test
            PIMCORE_TEST: 1
            PRIVATE_REPO: ${{ needs.setup-matrix.outputs.private_repo}}
            PHP_VERSION: ${{ matrix.matrix.php-version }}
            SYMFONY: ${{ matrix.matrix.symfony }}
            DEPENDENCIES: ${{ matrix.matrix.dependencies }}
            EXPERIMENTAL: ${{ matrix.matrix.experimental }}
            PIMCORE_VERSION: ${{ matrix.matrix.pimcore_version }}
            COMPOSER_OPTIONS: ${{ matrix.matrix.composer_options }}
        secrets:
            SSH_PRIVATE_KEY_PIMCORE_DEPLOYMENTS_USER: ${{ secrets.SSH_PRIVATE_KEY_PIMCORE_DEPLOYMENTS_USER }}
            COMPOSER_PIMCORE_REPO_PACKAGIST_TOKEN: ${{ secrets.COMPOSER_PIMCORE_REPO_PACKAGIST_TOKEN }}
        continue-on-error: ${{ matrix.experimental }}
        strategy:
            matrix:
                include:
                    - { php-version: "8.1", dependencies: "lowest", experimental: false }
                    - { php-version: "8.2", dependencies: "highest", experimental: false  }
                    - { php-version: "8.3", dependencies: "highest", pimcore_version: "11.x-dev as 11.3.9", experimental: true }
        steps:
            - name: "Checkout code"
              uses: "actions/checkout@v4"

            - name: "Install PHP"
              uses: shivammathur/setup-php@v2
              with:
                  coverage: "none"
                  php-version: "${{ matrix.php-version }}"

            - name: "Setup Pimcore environment"
              env:
                  DEPENDENCIES: "${{ matrix.dependencies }}"
              run: |
                  .github/ci/scripts/setup-environment.sh

            - name: "Update Pimcore version"
              env:
                PIMCORE_VERSION: "${{ matrix.pimcore_version }}"
              run: |
                if [ ! -z "$PIMCORE_VERSION" ]; then
                      composer require --no-update pimcore/pimcore:"${PIMCORE_VERSION}"
                fi    

            - name: "Install dependencies with Composer"
              uses: ramsey/composer-install@v3
              with:
                  dependency-versions: "${{ matrix.dependencies }}"

            - name: "Run a static analysis with phpstan/phpstan (highest)"
              if: ${{ matrix.dependencies == 'highest' }}
              run: "vendor/bin/phpstan analyse --memory-limit=-1"

            - name: "Run a static analysis with phpstan/phpstan (lowest)"
              if: ${{ matrix.dependencies == 'lowest' }}
              run: "vendor/bin/phpstan analyse --memory-limit=-1 -c phpstan-lowest.neon"

            - name: "Generate baseline file"
              if: ${{ failure() }}
              run: "vendor/bin/phpstan analyse --memory-limit=-1 --generate-baseline"

            - name: "Upload baseline file"
              if: ${{ failure() }}
              uses: actions/upload-artifact@v4
              with:
                  name: phpstan-baseline.neon
                  path: phpstan-baseline.neon
